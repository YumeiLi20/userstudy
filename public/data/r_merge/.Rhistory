3 -> x
x
3 = x
x = "cat"
length(x)
str_split(x, pattern = "")
str_split(c("cat","dog"), pattern = "")
library(stringdist)
?stringdist
stringdistmatrix("catx","ctax", method = "dl")
stringdistmatrix("cat","cta", method = "dl")
stringdistmatrix("carrot","cta", method = "dl")
val_1 = "hello"
val_2 = "henry"
spl_val_1 = str_split(val_1, pattern = "")[[1]]
spl_val_2 = str_split(val_2, pattern = "")[[1]]
stringdistmatrix(spl_val_1,spl_val_2, method = "dl")
adist("hello", "henry")
stringdist(spl_val_1,spl_val_2, method = "dl")
stringdist(val_1, method = "dl")
stringdist(val_1, val_2,method = "dl")
dl_dist = function(str_1, str_2) {
sp_str_1 = strsplit(str_1,"")[[1]]; sp_str_2 = strsplit(str_2,"")[[1]] #form the string
len_1 = length(sp_str_1); len_2 = length(sp_str_2) #length of strings
D <- matrix(nrow = len_2 + 1, ncol = len_1 + 1) #make a distance matrix
D[1,] = 0:len1 #the value for the 1st row
D[,1] = 0:len2 #the value for the 1st column
for (i in (1:len_2)+1) { #string starts at 2nd row
for (j in (1:len_1)+1) { #string starts at 2nd column
frpi = D[i-1,j] + 1
frpj = D[i,j-1] + 1
frpij = D[i-1,j-1] + ifelse(spstr1[j-1]!=spstr2[i-1],1,0)
D[i,j] = min(frpi,frpj,frpij) #get the minimum value of three:frpi, frpj, frpij
if (i>2 && j>2 && spstr1[j-1]==spstr2[i-2] && spstr1[j-2]==spstr2[i-1]) {
fr2pij = D[i-2,j-2] + 1
D[i,j] = min(D[i,j], fr2pij) #transposition
}
}
}
return(D[len2+1,len1+1]) #get damerau-levenshtein distance: i from str2, j from str1
}
dl_dist("hello", "henry")
dl_dist = function(str_1, str_2) {
sp_str_1 = strsplit(str_1,"")[[1]]; sp_str_2 = strsplit(str_2,"")[[1]] #form the string
len_1 = length(sp_str_1); len_2 = length(sp_str_2) #length of strings
D <- matrix(nrow = len_2 + 1, ncol = len_1 + 1) #make a distance matrix
D[1,] = 0:len1 #the value for the 1st row
D[,1] = 0:len2 #the value for the 1st column
for (i in (1:len_2)+1) { #string starts at 2nd row
for (j in (1:len_1)+1) { #string starts at 2nd column
frpi = D[i-1,j] + 1
frpj = D[i,j-1] + 1
frpij = D[i-1,j-1] + ifelse(spstr1[j-1]!=spstr2[i-1],1,0)
D[i,j] = min(frpi,frpj,frpij) #get the minimum value of three:frpi, frpj, frpij
if (i>2 && j>2 && spstr1[j-1]==spstr2[i-2] && spstr1[j-2]==spstr2[i-1]) {
fr2pij = D[i-2,j-2] + 1
D[i,j] = min(D[i,j], fr2pij) #transposition
}
}
}
return(D[len_2+1,len_1+1]) #get damerau-levenshtein distance: i from str2, j from str1
}
dl_dist("hello", "henry")
dl_dist = function(str_1, str_2) {
sp_str_1 = strsplit(str_1,"")[[1]]; sp_str_2 = strsplit(str_2,"")[[1]] #form the string
len_1 = length(sp_str_1); len_2 = length(sp_str_2) #length of strings
D <- matrix(nrow = len_2 + 1, ncol = len_1 + 1) #make a distance matrix
D[1,] = 0:len_1 #the value for the 1st row
D[,1] = 0:len_2 #the value for the 1st column
for (i in (1:len_2)+1) { #string starts at 2nd row
for (j in (1:len_1)+1) { #string starts at 2nd column
frpi = D[i-1,j] + 1
frpj = D[i,j-1] + 1
frpij = D[i-1,j-1] + ifelse(spstr1[j-1]!=spstr2[i-1],1,0)
D[i,j] = min(frpi,frpj,frpij) #get the minimum value of three:frpi, frpj, frpij
if (i>2 && j>2 && spstr1[j-1]==spstr2[i-2] && spstr1[j-2]==spstr2[i-1]) {
fr2pij = D[i-2,j-2] + 1
D[i,j] = min(D[i,j], fr2pij) #transposition
}
}
}
return(D[len_2+1,len_1+1]) #get damerau-levenshtein distance: i from str2, j from str1
}
dl_dist("hello", "henry")
dl_dist = function(str_1, str_2) {
sp_str_1 = strsplit(str_1,"")[[1]]; sp_str_2 = strsplit(str_2,"")[[1]] #form the string
len_1 = length(sp_str_1); len_2 = length(sp_str_2) #length of strings
D <- matrix(nrow = len_2 + 1, ncol = len_1 + 1) #make a distance matrix
D[1,] = 0:len_1 #the value for the 1st row
D[,1] = 0:len_2 #the value for the 1st column
for (i in (1:len_2)+1) { #string starts at 2nd row
for (j in (1:len_1)+1) { #string starts at 2nd column
frpi = D[i-1,j] + 1
frpj = D[i,j-1] + 1
frpij = D[i-1,j-1] + ifelse(sp_str_1[j-1] != sp_str_2[i-1],1,0)
D[i,j] = min(frpi,frpj,frpij) #get the minimum value of three:frpi, frpj, frpij
if (i>2 && j>2 && sp_str_1[j-1] == sp_str_2[i-2] && sp_str_1[j-2]==sp_str_2[i-1]) {
fr2pij = D[i-2,j-2] + 1
D[i,j] = min(D[i,j], fr2pij) #transposition
}
}
}
return(D[len_2+1,len_1+1]) #get damerau-levenshtein distance: i from str2, j from str1
}
dl_dist("hello", "henry")
dl_dist_mat = function(str_1, str_2) {
sp_str_1 = strsplit(str_1,"")[[1]]; sp_str_2 = strsplit(str_2,"")[[1]] #form the string
len_1 = length(sp_str_1); len_2 = length(sp_str_2) #length of strings
D <- matrix(nrow = len_2 + 1, ncol = len_1 + 1) #make a distance matrix
D[1,] = 0:len_1 #the value for the 1st row
D[,1] = 0:len_2 #the value for the 1st column
for (i in (1:len_2)+1) { #string starts at 2nd row
for (j in (1:len_1)+1) { #string starts at 2nd column
frpi = D[i-1,j] + 1
frpj = D[i,j-1] + 1
frpij = D[i-1,j-1] + ifelse(sp_str_1[j-1] != sp_str_2[i-1],1,0)
D[i,j] = min(frpi,frpj,frpij) #get the minimum value of three:frpi, frpj, frpij
if (i>2 && j>2 && sp_str_1[j-1] == sp_str_2[i-2] && sp_str_1[j-2]==sp_str_2[i-1]) {
fr2pij = D[i-2,j-2] + 1
D[i,j] = min(D[i,j], fr2pij) #transposition
}
}
}
return(D) #get damerau-levenshtein distance: i from str2, j from str1
}
dl_dist_mat("hello", "henry")
source("0_header.R")
mar17 <- read_csv("data/yancey1703.csv",
col_types = cols(.default = "c"))
(mar17 <- read_csv("data/yancey1703.csv",
col_types = cols(.default = "c")))
(apr13 <- read_csv("data/yancey1304.csv",
col_types = cols(.default = "c")))
(mar17_xs <-
mar17 %>%
filter(type == "XS") %>%
mutate(file = "mar17") %>%
select(ID = id, everything()))
(mar17_common_reg_xs <-
mar17_xs %>%
semi_join(apr13_xs, by = "voter_reg_num"))
(apr13_common_reg_xs <-
apr13_xs %>%
semi_join(mar17_xs, by = "voter_reg_num"))
(mar17_xs <-
mar17 %>%
filter(type == "XS") %>%
mutate(file = "mar17") %>%
select(ID = id, everything()))
(apr13_xs <-
apr13 %>%
filter(type == "XS") %>%
mutate(file = "apr13") %>%
select(ID = id, everything()))
(mar17_common_reg_xs <-
mar17_xs %>%
semi_join(apr13_xs, by = "voter_reg_num"))
(apr13_common_reg_xs <-
apr13_xs %>%
semi_join(mar17_xs, by = "voter_reg_num"))
(mar17_id_lookup <-
mar17_common_reg_xs %>%
select(ID,voter_reg_num))
apr13_common_reg_xs <-
apr13_common_reg_xs %>%
select(-ID) %>%
left_join(mar17_id_lookup, by = "voter_reg_num") %>%
select(ID, everything())
(apr13_common_reg_xs <-
apr13_common_reg_xs %>%
select(-ID) %>%
left_join(mar17_id_lookup, by = "voter_reg_num") %>%
select(ID, everything()))
xs_matches_diffs <-
bind_rows(apr13_common_reg_xs,mar17_common_reg_xs) %>%
select(-file) %>%
group_by(ID) %>%
unique() %>%
mutate(n = n()) %>%
arrange(ID) %T>%
View()
mar17 <- read_csv("data/yancey1703.csv", col_types = cols(.default = "c"))
apr13 <- read_csv("data/yancey1304.csv", col_types = cols(.default = "c"))
(mar17_twins <- mar17 %>%
filter(type == "XT") %>%
mutate(file = "mar17") %>%
select(ID = id,voter_reg_num,dupid,everything()))
(apr13_twins <- apr13 %>%
filter(type == "XT") %>%
mutate(file = "apr13") %>%
select(ID = id,voter_reg_num,dupid,everything()))
mar17_twins %>%
group_by(twinid) %>%
mutate(n = 1:n(), n = max(n)) %>%
arrange(desc(n)) %>%
select(n, everything())
create_groups <- function(data_twin) {
data_twin %>%
group_by(twinid) %>%
mutate(ID = min(as.numeric(voter_reg_num))) %>%
select(ID, everything()) %>%
arrange(ID)
}
mar17_twins[mar17_twins$ID==406]
mar17_twins[mar17_twins$ID==406,]
mar17_twins[apr13$ID==406,]
mar17_twins[apr13_twins$ID==406,]
apr13_twins[apr13_twins$ID==406,]
(mar17 <- read_csv("data/yancey1703.csv",
col_types = cols(.default = "c")))
(apr13 <- read_csv("data/yancey1304.csv",
col_types = cols(.default = "c")))
(mar17_xs <-
mar17 %>%
filter(type == "XS") %>%
mutate(file = "mar17") %>%
select(ID = as.integer(voter_reg_num), everything(),-id))
(apr13_xs <-
apr13 %>%
filter(type == "XS") %>%
mutate(file = "apr13") %>%
select(ID = as.integer(voter_reg_num), everything(),-id))
(mar17_common_reg_xs <-
mar17_xs %>%
semi_join(apr13_xs, by = "voter_reg_num"))
(apr13_common_reg_xs <-
apr13_xs %>%
semi_join(mar17_xs, by = "voter_reg_num"))
(mar17_xs <-
mar17 %>%
filter(type == "XS") %>%
mutate(file = "mar17") %>%
select(ID = as.integer(voter_reg_num), everything(),-id))
(apr13_xs <-
apr13 %>%
filter(type == "XS") %>%
mutate(file = "apr13") %>%
select(ID = as.integer(voter_reg_num), everything(),-id))
(mar17_common_reg_xs <-
mar17_xs %>%
semi_join(apr13_xs, by = "voter_reg_num"))
(mar17_common_reg_xs <-
mar17_xs %>%
semi_join(apr13_xs, by = "voter_reg_num"))
mar17_xs
(mar17 <- read_csv("data/yancey1703.csv",
col_types = cols(.default = "c")))
(apr13 <- read_csv("data/yancey1304.csv",
col_types = cols(.default = "c")))
(mar17_xs <-
mar17 %>%
filter(type == "XS") %>%
mutate(file = "mar17",
ID = as.integer(voter_reg_num)) %>%
select(ID, everything(),-id))
(apr13_xs <-
apr13 %>%
filter(type == "XS") %>%
mutate(file = "apr13",
ID = as.integer(voter_reg_num)) %>%
select(ID = id, everything(),-id))
(mar17_common_reg_xs <-
mar17_xs %>%
semi_join(apr13_xs, by = "voter_reg_num"))
(apr13_common_reg_xs <-
apr13_xs %>%
semi_join(mar17_xs, by = "voter_reg_num"))
(mar17_id_lookup <-
mar17_common_reg_xs %>%
select(ID,voter_reg_num))
(apr13_common_reg_xs <-
apr13_common_reg_xs %>%
select(-ID) %>%
left_join(mar17_id_lookup, by = "voter_reg_num") %>%
select(ID, everything()))
xs_matches_diffs <-
bind_rows(apr13_common_reg_xs,mar17_common_reg_xs) %>%
select(-file) %>%
group_by(ID) %>%
unique() %>%
mutate(n = n()) %>%
arrange(ID) %T>%
View()
(xs_natural_diff <-
xs_matches_diffs %>%
filter(n > 1) %>%
select(-n)) %>%
ungroup()
(xs_natural_diff_apr13 <-
xs_natural_diff %>%
ungroup() %>%
semi_join(apr13_common_reg_xs) %>%
mutate(file = "apr13"))
(xs_natural_diff_mar17 <-
xs_natural_diff %>%
ungroup %>%
semi_join(mar17_common_reg_xs) %>%
mutate(file = "mar17"))
natural_differences <-
bind_rows(xs_natural_diff_apr13,xs_natural_diff_mar17) %>%
arrange(ID) %>%
mutate(modif = NA,
pos = NA,
error_nature = "natural")
natural_differences %>%
write_csv("data/natural_differences.csv")
xs_matches <-
xs_matches_diffs %>%
filter(n == 1) %>%
select(-n)
set.seed(1)
(xs_matches_mar <-
xs_matches %>%
mutate(file = "mar17",
name_sufx_cd = ifelse(is.na(name_sufx_cd),"",name_sufx_cd),
dob = format(mdy(dob), format="%m-%d-%Y"),
dob = ifelse(is.na(dob),"", dob)) %>%
select(ID, voter_reg_num, last_name, first_name, dob, name_sufx_cd) %>%
ungroup() %>%
sample_n(1000) %T>%
write_csv("data/egen_data.csv"))
(xs_matches_apr <-
xs_matches %>%
filter(ID %in% xs_matches_mar$ID) %>%
mutate(file = "apr13",
twinid = NA,
dob = format(mdy(dob), format="%m-%d-%Y"),
dob = ifelse(is.na(dob),"", dob)) %T>%
write_csv("data/egen_original.csv") %T>%
View())
system("C:/Python27/python.exe call_egen.py")
(egen_output <- read_csv("data/data_modified.csv",
col_types = cols(.default = "c")) %>%
mutate(file = "mar17",
dupid = NA,
twinid = NA,
type = "XS"
))
equal_recs <- function(voter_reg_num, first_name, last_name, dob) {
# message("testing")
# print(voter_reg_num)
# print(first_name)
# print(last_name)
# print(dob)
if((sum(is.na(voter_reg_num)) == 1)|
(sum(is.na(first_name)) == 1)|
(sum(is.na(last_name)) == 1)|
(sum(is.na(dob)) == 1)) {
return(FALSE)
}
if((length(voter_reg_num) == 1)|((length(first_name) == 1))|(length(last_name) == 1)|(length(dob) == 1)) {
return(FALSE)
}
if(voter_reg_num[1]!=voter_reg_num[2]){
return(FALSE)
}
if(first_name[1]!=first_name[2]){
return(FALSE)
}
if(last_name[1]!=last_name[2]){
return(FALSE)
}
if(dob[1]!=dob[2]){
return(FALSE)
}
#message("same")
return(TRUE)
}
egen_data_pairs <-
xs_matches_apr %>%
select(-name_sufx_cd) %>%
bind_rows(egen_output) %>%
mutate(modif = NA,
error_nature = "egen",
pos = NA) %>%
group_by(ID) %>%
mutate(equal = equal_recs(voter_reg_num,first_name,last_name,dob)) %>%
filter(equal == FALSE) %>%
select(-equal) %>%
arrange(ID) %T>%
View()
xs_matches_apr
egen_output
xs_matches_apr
egen_data_pairs <-
xs_matches_apr %>%
select(-name_sufx_cd) %>%
bind_rows(egen_output) %>%
mutate(modif = NA,
error_nature = "egen",
pos = NA) %>%
group_by(ID) %>%
mutate(equal = equal_recs(voter_reg_num,first_name,last_name,dob)) %>%
filter(equal == FALSE) %>%
select(-equal) %>%
arrange(ID) %T>%
View()
egen_data_pairs
egen_data_pairs
(egen_output <- read_csv("data/data_modified.csv",
col_types = cols(.default = "c")) %>%
mutate(file = "mar17",
dupid = NA,
twinid = NA,
type = "XS"
))
equal_recs <- function(voter_reg_num, first_name, last_name, dob) {
# message("testing")
# print(voter_reg_num)
# print(first_name)
# print(last_name)
# print(dob)
if((sum(is.na(voter_reg_num)) == 1)|
(sum(is.na(first_name)) == 1)|
(sum(is.na(last_name)) == 1)|
(sum(is.na(dob)) == 1)) {
return(FALSE)
}
if((length(voter_reg_num) == 1)|((length(first_name) == 1))|(length(last_name) == 1)|(length(dob) == 1)) {
return(FALSE)
}
if(voter_reg_num[1]!=voter_reg_num[2]){
return(FALSE)
}
if(first_name[1]!=first_name[2]){
return(FALSE)
}
if(last_name[1]!=last_name[2]){
return(FALSE)
}
if(dob[1]!=dob[2]){
return(FALSE)
}
#message("same")
return(TRUE)
}
egen_data_pairs <-
xs_matches_apr %>%
select(-name_sufx_cd) %>%
bind_rows(egen_output) %>%
mutate(modif = NA,
error_nature = "egen",
pos = NA) %>%
group_by(ID) %>%
mutate(equal = equal_recs(voter_reg_num,first_name,last_name,dob)) %>%
filter(equal == FALSE) %>%
select(-equal) %>%
arrange(ID) %T>%
View()
xs_matches_apr
egen_output
egen_output
(egen_output <- read_csv("data/data_modified.csv",
col_types = cols(.default = "c")) %>%
mutate(file = "mar17",
dupid = NA,
twinid = NA,
type = "XS",
ID = as.integer(ID)
))
egen_data_pairs <-
xs_matches_apr %>%
select(-name_sufx_cd) %>%
bind_rows(egen_output) %>%
mutate(modif = NA,
error_nature = "egen",
pos = NA) %>%
group_by(ID) %>%
mutate(equal = equal_recs(voter_reg_num,first_name,last_name,dob)) %>%
filter(equal == FALSE) %>%
select(-equal) %>%
arrange(ID) %T>%
View()
egen <- read_csv("data/egen_pairs.csv", col_types = cols(.default = "c"))
natural <- read_csv("data/natural_differences.csv", col_types = cols(.default = "c"))
twins <- read_csv("data/twins_r.csv", col_types = cols(.default = "c"))
duplicates <- read_csv("data/duplicates_r.csv", col_types = cols(.default = "c"))
all_data <-
bind_rows(egen,natural,twins,duplicates) %>%
mutate(last_name = ifelse(error_nature != "egen" & !is.na(name_sufx_cd),
paste(last_name,name_sufx_cd),
last_name),
file = ifelse(file == "mar17",
"B",
"A")) %>%
select(-name_sufx_cd)
unique_ID <-
all_data %$%
ID %>%
unique()
(ID_table <-
tibble(ID = unique_ID,
new_ID = 1:length(unique_ID)))
(all_data <-
all_data %>%
left_join(ID_table) %>%
mutate(ID = new_ID) %>%
select(-new_ID) %T>%
View())
all_data <-
all_data %>%
group_by(file) %>%
mutate(n = 1:n(),
ID_u = paste0(file,"-",n),
dob = ifelse(is.na(dob),"", dob)) %>%
ungroup() %>%
select(ID, everything(), -file,-n, file_id = ID_u) %T>%
View()
all_data %>%
write_csv("data/groups_without_modif.csv")
all_data %>%
filter(ID == 406)
